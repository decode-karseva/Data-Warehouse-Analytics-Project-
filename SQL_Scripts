# Data Warehouse Analytics using MySQL

## Overview

This project demonstrates a complete data analytics workflow on a MySQL-based data warehouse using fact and dimension tables. It includes database creation, table definitions, schema exploration, and in-depth SQL analysis. The project is inspired by Data With Baraa and focuses on deriving insights from sales, product, and customer data.

## Dataset Overview

The dataset is structured using a star schema and includes:

* `gold_fact_sales`: Sales transactions (fact table)
* `gold_dim_customers`: Customer information
* `gold_dim_products`: Product catalog

## Objectives and Business Questions with SQL

The primary goal is to analyze customer demographics, product categories, sales trends, and overall performance using SQL. Below are the sub-questions and corresponding SQL code.

### A. Database & Schema Exploration

#### 1. What tables exist in the database?

```sql
SHOW TABLES;
```

#### 2. What is the structure of each table?

```sql
DESCRIBE gold_fact_sales;
DESCRIBE gold_dim_customers;
DESCRIBE gold_dim_products;
```

### B. Dimensional Analysis

#### 3. Which countries are our customers from?

```sql
SELECT DISTINCT country FROM gold_dim_customers;
```

#### 4. What product categories, subcategories, and names are available?

```sql
SELECT DISTINCT category, subcategory, product_name FROM gold_dim_products;
```

### C. Date Range & Customer Age Analysis

#### 5. What is the range between the first and last orders in months?

```sql
SELECT TIMESTAMPDIFF(MONTH, MIN(order_date), MAX(order_date)) AS month_range 
FROM gold_fact_sales;
```

#### 6. Oldest and youngest customer birthdates with ages

```sql
SELECT 
  MIN(birthdate) AS oldest_birthdate,
  MAX(birthdate) AS youngest_birthdate,
  TIMESTAMPDIFF(YEAR, MIN(birthdate), CURDATE()) AS oldest_age,
  TIMESTAMPDIFF(YEAR, MAX(birthdate), CURDATE()) AS youngest_age
FROM gold_dim_customers;
```

### D. Customer Distribution Analysis

#### 7. How many customers are there from each country?

```sql
SELECT country, COUNT(*) AS total_customers 
FROM gold_dim_customers
GROUP BY country
ORDER BY total_customers DESC;
```

#### 8. What is the gender distribution of customers?

```sql
SELECT gender, COUNT(*) AS total 
FROM gold_dim_customers
GROUP BY gender;
```

### E. Product Distribution Analysis

#### 9. How many products are in each category?

```sql
SELECT category, COUNT(*) AS total_products 
FROM gold_dim_products
GROUP BY category;
```

#### 10. What is the average cost of products by category?

```sql
SELECT category, ROUND(AVG(cost), 2) AS avg_cost 
FROM gold_dim_products
GROUP BY category;
```

### F. Revenue and Sales Analysis

#### 11. Total revenue generated by each product category

```sql
SELECT p.category, SUM(s.sales_amount) AS total_revenue
FROM gold_fact_sales s
JOIN gold_dim_products p ON s.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;
```

#### 12. Top revenue-generating customers

```sql
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       SUM(s.sales_amount) AS total_revenue
FROM gold_fact_sales s
JOIN gold_dim_customers c ON s.customer_key = c.customer_key
GROUP BY c.customer_id, customer_name
ORDER BY total_revenue DESC
LIMIT 10;
```

#### 13. Countries that generated the highest number of sold items

```sql
SELECT c.country, SUM(s.quantity) AS total_quantity_sold
FROM gold_fact_sales s
JOIN gold_dim_customers c ON s.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_quantity_sold DESC;
```

### G. Product Ranking Analysis

#### 14. Top 5 products by revenue

```sql
SELECT p.product_name, SUM(s.sales_amount) AS total_revenue
FROM gold_fact_sales s
JOIN gold_dim_products p ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;
```

#### 15. Bottom 5 products by revenue

```sql
SELECT p.product_name, SUM(s.sales_amount) AS total_revenue
FROM gold_fact_sales s
JOIN gold_dim_products p ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue ASC
LIMIT 5;
```

#### 16. Rank all products by revenue using SQL window functions

```sql
SELECT p.product_name, 
       SUM(s.sales_amount) AS total_revenue,
       RANK() OVER (ORDER BY SUM(s.sales_amount) DESC) AS revenue_rank
FROM gold_fact_sales s
JOIN gold_dim_products p ON s.product_key = p.product_key
GROUP BY p.product_name;
```

### H. Customer Ranking Analysis

#### 17. Top 10 customers by revenue

```sql
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       SUM(s.sales_amount) AS total_revenue
FROM gold_fact_sales s
JOIN gold_dim_customers c ON s.customer_key = c.customer_key
GROUP BY c.customer_id, customer_name
ORDER BY total_revenue DESC
LIMIT 10;
```

#### 18. Customers who placed the least number of orders

```sql
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
       COUNT(s.order_number) AS order_count
FROM gold_fact_sales s
JOIN gold_dim_customers c ON s.customer_key = c.customer_key
GROUP BY c.customer_id, customer_name
ORDER BY order_count ASC
LIMIT 3;
```

---

## Concepts Applied

* Star schema design (fact and dimension tables)
* SQL joins (INNER, LEFT JOIN)
* Aggregation functions: `SUM`, `AVG`, `COUNT`, `MIN`, `MAX`
* Date functions: `TIMESTAMPDIFF`, `CURDATE()`
* Window functions: `RANK() OVER (...)`
* Grouping and ordering data for business intelligence

## How to Use

1. Load the CSV files into your MySQL database.
2. Run the SQL queries in a MySQL client like MySQL Workbench.
3. Use the results for data storytelling or BI reporting.

## Acknowledgements

This project is inspired by the **Data With Baraa** YouTube channel, which provides clear, hands-on SQL projects for data analysis and warehousing.

## Author

**Karthik Saravanan**
Masterâ€™s in Economics, Gokhale Institute of Politics and Economics
Location: Daund, Pune, Maharashtra

